
experiment_one.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000a88  00000b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080013c  0080013c  00000b58  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014b5  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e03  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000861  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000037e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f0  00000000  00000000  000039e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000965  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00004a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 82 00 	jmp	0x104	; 0x104 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000cc <Prnt_bytes_prnt>:
  cc:	41 64 64 72 2e 20 30 20 20 31 20 20 32 20 20 33     Addr. 0  1  2  3
  dc:	20 20 34 20 20 35 20 20 36 20 20 37 20 20 38 20       4  5  6  7  8 
  ec:	20 39 20 20 41 20 20 42 20 20 43 20 20 44 20 20      9  A  B  C  D  
  fc:	45 20 20 46 0a 0d 00 00                             E  F....

00000104 <__ctors_end>:
 104:	11 24       	eor	r1, r1
 106:	1f be       	out	0x3f, r1	; 63
 108:	cf ef       	ldi	r28, 0xFF	; 255
 10a:	d8 e0       	ldi	r29, 0x08	; 8
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	cd bf       	out	0x3d, r28	; 61

00000110 <__do_copy_data>:
 110:	11 e0       	ldi	r17, 0x01	; 1
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b1 e0       	ldi	r27, 0x01	; 1
 116:	e8 e8       	ldi	r30, 0x88	; 136
 118:	fa e0       	ldi	r31, 0x0A	; 10
 11a:	02 c0       	rjmp	.+4      	; 0x120 <__do_copy_data+0x10>
 11c:	05 90       	lpm	r0, Z+
 11e:	0d 92       	st	X+, r0
 120:	ac 33       	cpi	r26, 0x3C	; 60
 122:	b1 07       	cpc	r27, r17
 124:	d9 f7       	brne	.-10     	; 0x11c <__do_copy_data+0xc>

00000126 <__do_clear_bss>:
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	ac e3       	ldi	r26, 0x3C	; 60
 12a:	b1 e0       	ldi	r27, 0x01	; 1
 12c:	01 c0       	rjmp	.+2      	; 0x130 <.do_clear_bss_start>

0000012e <.do_clear_bss_loop>:
 12e:	1d 92       	st	X+, r1

00000130 <.do_clear_bss_start>:
 130:	ac 38       	cpi	r26, 0x8C	; 140
 132:	b2 07       	cpc	r27, r18
 134:	e1 f7       	brne	.-8      	; 0x12e <.do_clear_bss_loop>
 136:	0e 94 a1 00 	call	0x142	; 0x142 <main>
 13a:	0c 94 42 05 	jmp	0xa84	; 0xa84 <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <main>:
#include <avr/pgmspace.h>

//const int8_t test[15] PROGMEM = "This is test\n\r";

int main(void)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	e1 97       	sbiw	r28, 0x31	; 49
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	//Part 3 Output initialization
	Output_Set(&PC , (1<<PORT_USERLED));
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	86 e2       	ldi	r24, 0x26	; 38
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 02 01 	call	0x204	; 0x204 <Output_Set>
	Output_Init(&PC , (1<<DDR_USERLED));
 160:	60 e8       	ldi	r22, 0x80	; 128
 162:	86 e2       	ldi	r24, 0x26	; 38
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 ff 00 	call	0x1fe	; 0x1fe <Output_Init>

	//Part 6, UART initialization, baud rate = 9600
	UART_Init(&UART1,9600);
 16a:	60 e8       	ldi	r22, 0x80	; 128
 16c:	75 e2       	ldi	r23, 0x25	; 37
 16e:	88 ec       	ldi	r24, 0xC8	; 200
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 a2 01 	call	0x344	; 0x344 <UART_Init>
	uint8_t testChar = 'U';


	//Part 8, initialize print buffer, put a string in, and transmit it
	uint8_t testing[7] PROGMEM = "memeing";
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x3e>
	uint8_t * string_p = Export_print_buffer();
 188:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Export_print_buffer>
 18c:	99 87       	std	Y+9, r25	; 0x09
 18e:	88 87       	std	Y+8, r24	; 0x08
	Copy_String_to_Buffer(&testing, 7, &string_p);
 190:	ae 01       	movw	r20, r28
 192:	48 5f       	subi	r20, 0xF8	; 248
 194:	5f 4f       	sbci	r21, 0xFF	; 255
 196:	67 e0       	ldi	r22, 0x07	; 7
 198:	ce 01       	movw	r24, r28
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Copy_String_to_Buffer>
	UART_Transmit_String(&UART1, 7, &testing);
 1a0:	ae 01       	movw	r20, r28
 1a2:	4f 5f       	subi	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	67 e0       	ldi	r22, 0x07	; 7
 1a8:	88 ec       	ldi	r24, 0xC8	; 200
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UART_Transmit_String>

	//Part 10, 30+ char string to be printed from memory
	uint8_t message[40] = "Mikel and Hayden, Best Friends Forever";
 1b0:	87 e2       	ldi	r24, 0x27	; 39
 1b2:	e8 e0       	ldi	r30, 0x08	; 8
 1b4:	f1 e0       	ldi	r31, 0x01	; 1
 1b6:	de 01       	movw	r26, r28
 1b8:	1a 96       	adiw	r26, 0x0a	; 10
 1ba:	01 90       	ld	r0, Z+
 1bc:	0d 92       	st	X+, r0
 1be:	8a 95       	dec	r24
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x78>
 1c2:	19 aa       	std	Y+49, r1	; 0x31
	print_memory(&UART1, 39, &message);
 1c4:	ae 01       	movw	r20, r28
 1c6:	46 5f       	subi	r20, 0xF6	; 246
 1c8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ca:	67 e2       	ldi	r22, 0x27	; 39
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	88 ec       	ldi	r24, 0xC8	; 200
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 75 01 	call	0x2ea	; 0x2ea <print_memory>
	Output_Set(&PC , (1<<PORT_USERLED));
	Output_Init(&PC , (1<<DDR_USERLED));

	//Part 6, UART initialization, baud rate = 9600
	UART_Init(&UART1,9600);
	uint8_t testChar = 'U';
 1d6:	85 e5       	ldi	r24, 0x55	; 85
		_delay_ms(500);
		*/
		
		
		//Part 6, UART transmit ascii U
		UART_Transmit(&UART1, testChar);
 1d8:	68 2f       	mov	r22, r24
 1da:	88 ec       	ldi	r24, 0xC8	; 200
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	87 ea       	ldi	r24, 0xA7	; 167
 1e6:	91 e6       	ldi	r25, 0x61	; 97
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xa6>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xb0>
 1f2:	00 00       	nop
		_delay_ms(2000);

		//Part 7, Echo received char into testChar for transmitting
		testChar = UART_Receive(&UART1);
 1f4:	88 ec       	ldi	r24, 0xC8	; 200
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Receive>
 1fc:	ed cf       	rjmp	.-38     	; 0x1d8 <main+0x96>

000001fe <Output_Init>:


void Output_Clear(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	
	*(port_addr + 2) &= (~pin_mask);
 1fe:	fc 01       	movw	r30, r24
 200:	61 83       	std	Z+1, r22	; 0x01
 202:	08 95       	ret

00000204 <Output_Set>:


void Output_Set(uint8_t volatile * port_addr, uint8_t pin_mask)
{
	
	*(port_addr + 2) |= (pin_mask);
 204:	fc 01       	movw	r30, r24
 206:	22 81       	ldd	r18, Z+2	; 0x02
 208:	62 2b       	or	r22, r18
 20a:	62 83       	std	Z+2, r22	; 0x02
 20c:	08 95       	ret

0000020e <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t volatile * UART_addr, uint8_t * array_in)
{
 20e:	8f 92       	push	r8
 210:	9f 92       	push	r9
 212:	af 92       	push	r10
 214:	bf 92       	push	r11
 216:	cf 92       	push	r12
 218:	df 92       	push	r13
 21a:	ef 92       	push	r14
 21c:	ff 92       	push	r15
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	7c 01       	movw	r14, r24
 228:	eb 01       	movw	r28, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 22a:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Export_print_buffer>
 22e:	c8 2e       	mov	r12, r24
 230:	d9 2e       	mov	r13, r25
   
   input = array_in;
   sprintf(prnt_bffr, "%p ",input);
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	9f 93       	push	r25
 23c:	8f 93       	push	r24
 23e:	df 92       	push	r13
 240:	cf 92       	push	r12
 242:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sprintf>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 246:	4c 2d       	mov	r20, r12
 248:	5d 2d       	mov	r21, r13
 24a:	60 e0       	ldi	r22, 0x00	; 0
 24c:	c7 01       	movw	r24, r14
 24e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UART_Transmit_String>
 252:	8e 01       	movw	r16, r28
 254:	5e 01       	movw	r10, r28
 256:	f0 e1       	ldi	r31, 0x10	; 16
 258:	af 0e       	add	r10, r31
 25a:	b1 1c       	adc	r11, r1
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
   for (index=0;index<16;index++)
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 268:	0f 2e       	mov	r0, r31
 26a:	f4 e3       	ldi	r31, 0x34	; 52
 26c:	8f 2e       	mov	r8, r31
 26e:	f1 e0       	ldi	r31, 0x01	; 1
 270:	9f 2e       	mov	r9, r31
 272:	f0 2d       	mov	r31, r0
   input = array_in;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
   {
      dat=*(input+index);
 274:	89 91       	ld	r24, Y+
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
 276:	1f 92       	push	r1
 278:	8f 93       	push	r24
 27a:	9f 92       	push	r9
 27c:	8f 92       	push	r8
 27e:	df 92       	push	r13
 280:	cf 92       	push	r12
 282:	0e 94 58 02 	call	0x4b0	; 0x4b0 <sprintf>
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
 286:	4c 2d       	mov	r20, r12
 288:	5d 2d       	mov	r21, r13
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	c7 01       	movw	r24, r14
 28e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UART_Transmit_String>
   prnt_bffr=Export_print_buffer();
   
   input = array_in;
   sprintf(prnt_bffr, "%p ",input);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   for (index=0;index<16;index++)
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	0f 90       	pop	r0
 298:	0f 90       	pop	r0
 29a:	0f 90       	pop	r0
 29c:	0f 90       	pop	r0
 29e:	ac 16       	cp	r10, r28
 2a0:	bd 06       	cpc	r11, r29
 2a2:	41 f7       	brne	.-48     	; 0x274 <print_16bytes+0x66>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
 2a4:	f8 01       	movw	r30, r16
 2a6:	61 91       	ld	r22, Z+
 2a8:	8f 01       	movw	r16, r30
      if (dat<32 || dat>127) dat=46;
 2aa:	80 ee       	ldi	r24, 0xE0	; 224
 2ac:	86 0f       	add	r24, r22
 2ae:	80 36       	cpi	r24, 0x60	; 96
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <print_16bytes+0xa6>
 2b2:	6e e2       	ldi	r22, 0x2E	; 46
      UART_Transmit(UART_addr,dat);
 2b4:	c7 01       	movw	r24, r14
 2b6:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_Transmit_String(UART_addr,0,prnt_bffr);
   }
   for (index=0;index<16;index++)
 2ba:	0a 15       	cp	r16, r10
 2bc:	1b 05       	cpc	r17, r11
 2be:	91 f7       	brne	.-28     	; 0x2a4 <print_16bytes+0x96>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_Transmit(UART_addr,dat);
   }
   UART_Transmit(UART_addr,CR);
 2c0:	6d e0       	ldi	r22, 0x0D	; 13
 2c2:	c7 01       	movw	r24, r14
 2c4:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
   UART_Transmit(UART_addr,LF);
 2c8:	6a e0       	ldi	r22, 0x0A	; 10
 2ca:	c7 01       	movw	r24, r14
 2cc:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
}
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	df 90       	pop	r13
 2de:	cf 90       	pop	r12
 2e0:	bf 90       	pop	r11
 2e2:	af 90       	pop	r10
 2e4:	9f 90       	pop	r9
 2e6:	8f 90       	pop	r8
 2e8:	08 95       	ret

000002ea <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t volatile * UART_addr, uint16_t number_of_bytes, uint8_t * array_in)
{
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	0f 93       	push	r16
 2f4:	1f 93       	push	r17
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	7c 01       	movw	r14, r24
 2fc:	8b 01       	movw	r16, r22
 2fe:	6a 01       	movw	r12, r20
   uint8_t * input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
 300:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <Export_print_buffer>
 304:	ec 01       	movw	r28, r24
   
   input = array_in;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
 306:	ac 01       	movw	r20, r24
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	8c ec       	ldi	r24, 0xCC	; 204
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <Copy_String_to_Buffer>
   UART_Transmit_String(UART_addr,0,prnt_bffr);
 312:	ae 01       	movw	r20, r28
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	c7 01       	movw	r24, r14
 318:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UART_Transmit_String>
   uint8_t * input;
   char * prnt_bffr;
   
   prnt_bffr=Export_print_buffer();
   
   input = array_in;
 31c:	e6 01       	movw	r28, r12
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,input);
      input+=16;
   }while(input<(array_in+number_of_bytes));
 31e:	0c 0d       	add	r16, r12
 320:	1d 1d       	adc	r17, r13
   input = array_in;
   Copy_String_to_Buffer(Prnt_bytes_prnt,0,prnt_bffr);
   UART_Transmit_String(UART_addr,0,prnt_bffr);
   do
   {
      print_16bytes(UART_addr,input);
 322:	be 01       	movw	r22, r28
 324:	c7 01       	movw	r24, r14
 326:	0e 94 07 01 	call	0x20e	; 0x20e <print_16bytes>
      input+=16;
 32a:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(array_in+number_of_bytes));
 32c:	c0 17       	cp	r28, r16
 32e:	d1 07       	cpc	r29, r17
 330:	c0 f3       	brcs	.-16     	; 0x322 <print_memory+0x38>
}
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <UART_Init>:
#include "board.h"
#include <stdio.h>

#define U2X (0)

void UART_Init(uint8_t volatile *UART_addr, uint16_t baud_rate){
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
 348:	ec 01       	movw	r28, r24
	uint16_t UBRR_value = (uint16_t)(((F_CPU/OSC_DIV)/(8UL*(2-U2X)*baud_rate))-1);
 34a:	cb 01       	movw	r24, r22
 34c:	a0 e0       	ldi	r26, 0x00	; 0
 34e:	b0 e0       	ldi	r27, 0x00	; 0
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	aa 1f       	adc	r26, r26
 356:	bb 1f       	adc	r27, r27
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	aa 1f       	adc	r26, r26
 35e:	bb 1f       	adc	r27, r27
 360:	9c 01       	movw	r18, r24
 362:	ad 01       	movw	r20, r26
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	44 1f       	adc	r20, r20
 36a:	55 1f       	adc	r21, r21
 36c:	22 0f       	add	r18, r18
 36e:	33 1f       	adc	r19, r19
 370:	44 1f       	adc	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	74 e2       	ldi	r23, 0x24	; 36
 378:	84 ef       	ldi	r24, 0xF4	; 244
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 36 02 	call	0x46c	; 0x46c <__udivmodsi4>
 380:	21 50       	subi	r18, 0x01	; 1
 382:	31 09       	sbc	r19, r1
	
	// Set Baud Rate
	*(UART_addr+UBRRH) = UBRR_value/256;
 384:	3d 83       	std	Y+5, r19	; 0x05
	*(UART_addr+UBRRL) = UBRR_value%256;
 386:	2c 83       	std	Y+4, r18	; 0x04
	
	*(UART_addr+UCSRA) = (U2X<<1);
 388:	18 82       	st	Y, r1
	
	*(UART_addr+UCSRC) = Asynchronous|No_Parity|One_Stop_Bit|Eight_Data_Bits;
 38a:	83 e0       	ldi	r24, 0x03	; 3
 38c:	8a 83       	std	Y+2, r24	; 0x02
	
	
	// RX & TX Enabled, no interrupts, no multi-drop, Char size 8
	*(UART_addr+UCSRB) = ((1<<RXEN) | (1<<TXEN) | (1<<UCSZ2)); 
 38e:	8c e1       	ldi	r24, 0x1C	; 28
 390:	89 83       	std	Y+1, r24	; 0x01
	//*(UART_addr+UCSRB) = 0x1C;
	
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <UART_Transmit>:

uint8_t UART_Transmit(uint8_t volatile *UART_addr, int8_t send_value){
 398:	fc 01       	movw	r30, r24
	uint8_t status;
	do{
		status = *(UART_addr+UCSRA);
 39a:	90 81       	ld	r25, Z
	}while ((status & (1<<UDRE)) != (1<<UDRE));
 39c:	95 ff       	sbrs	r25, 5
 39e:	fd cf       	rjmp	.-6      	; 0x39a <UART_Transmit+0x2>
	
	*(UART_addr+UDR) = send_value;
 3a0:	66 83       	std	Z+6, r22	; 0x06
	
	return 0;
}
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	08 95       	ret

000003a6 <UART_Receive>:

uint8_t UART_Receive(uint8_t volatile *UART_addr){
 3a6:	fc 01       	movw	r30, r24
	uint8_t status;
	uint8_t received_value;
	do{
		status = *(UART_addr+UCSRA);
 3a8:	90 81       	ld	r25, Z
	}while ((status & (1<<RXC)) != (1<<RXC));
 3aa:	99 23       	and	r25, r25
 3ac:	ec f7       	brge	.-6      	; 0x3a8 <UART_Receive+0x2>
	
	received_value = *(UART_addr+UDR);
 3ae:	86 81       	ldd	r24, Z+6	; 0x06
	
	return received_value;
}
 3b0:	08 95       	ret

000003b2 <Export_print_buffer>:

int8_t * Export_print_buffer(void)
{
	
	return print_buffer;
}
 3b2:	8c e3       	ldi	r24, 0x3C	; 60
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	08 95       	ret

000003b8 <Copy_String_to_Buffer>:

uint8_t Copy_String_to_Buffer(const int8_t * flash_string, uint8_t num_bytes, int8_t * buffer_p)
{
	uint8_t index;
	uint8_t value;
	if(num_bytes==0)
 3b8:	61 11       	cpse	r22, r1
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <Copy_String_to_Buffer+0x20>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
 3bc:	26 2f       	mov	r18, r22
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	fc 01       	movw	r30, r24
 3c2:	e2 0f       	add	r30, r18
 3c4:	f3 1f       	adc	r31, r19
 3c6:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
 3c8:	da 01       	movw	r26, r20
 3ca:	a2 0f       	add	r26, r18
 3cc:	b3 1f       	adc	r27, r19
 3ce:	ec 93       	st	X, r30
			index++;
 3d0:	6f 5f       	subi	r22, 0xFF	; 255
		} while (value!=0);
 3d2:	e1 11       	cpse	r30, r1
 3d4:	f3 cf       	rjmp	.-26     	; 0x3bc <Copy_String_to_Buffer+0x4>
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <Copy_String_to_Buffer+0x3c>
 3d8:	fc 01       	movw	r30, r24
 3da:	da 01       	movw	r26, r20
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	86 0f       	add	r24, r22
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	48 0f       	add	r20, r24
 3e6:	59 1f       	adc	r21, r25
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
 3e8:	84 91       	lpm	r24, Z
			buffer_p[index]=value;
 3ea:	8d 93       	st	X+, r24
 3ec:	31 96       	adiw	r30, 0x01	; 1
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 3ee:	a4 17       	cp	r26, r20
 3f0:	b5 07       	cpc	r27, r21
 3f2:	d1 f7       	brne	.-12     	; 0x3e8 <Copy_String_to_Buffer+0x30>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
 3f4:	86 2f       	mov	r24, r22
 3f6:	08 95       	ret

000003f8 <UART_Transmit_String>:

void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, int8_t * string_name)
{
 3f8:	cf 92       	push	r12
 3fa:	df 92       	push	r13
 3fc:	ef 92       	push	r14
 3fe:	ff 92       	push	r15
 400:	0f 93       	push	r16
 402:	1f 93       	push	r17
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	7c 01       	movw	r14, r24
 40a:	8a 01       	movw	r16, r20
	int8_t temp8,index;
	if(num_bytes==0)
 40c:	66 23       	and	r22, r22
 40e:	31 f0       	breq	.+12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 410:	c6 2e       	mov	r12, r22
 412:	d1 2c       	mov	r13, r1
 414:	1c 14       	cp	r1, r12
 416:	1d 04       	cpc	r1, r13
 418:	74 f0       	brlt	.+28     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 41a:	1f c0       	rjmp	.+62     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
void UART_Transmit_String(uint8_t volatile * UART_addr, uint8_t num_bytes, int8_t * string_name)
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
 41c:	fa 01       	movw	r30, r20
 41e:	60 81       	ld	r22, Z
		while (temp8!=0)
 420:	66 23       	and	r22, r22
 422:	d9 f0       	breq	.+54     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 424:	ea 01       	movw	r28, r20
 426:	21 96       	adiw	r28, 0x01	; 1
		{
			UART_Transmit(UART_addr, temp8);
 428:	c7 01       	movw	r24, r14
 42a:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
			string_name++;
			temp8=*string_name;
 42e:	69 91       	ld	r22, Y+
{
	int8_t temp8,index;
	if(num_bytes==0)
	{
		temp8=*string_name;
		while (temp8!=0)
 430:	61 11       	cpse	r22, r1
 432:	fa cf       	rjmp	.-12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 434:	12 c0       	rjmp	.+36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 436:	c0 e0       	ldi	r28, 0x00	; 0
		{
			UART_Transmit(UART_addr, string_name[index]);
 438:	f8 01       	movw	r30, r16
 43a:	ec 0f       	add	r30, r28
 43c:	f1 1d       	adc	r31, r1
 43e:	c7 fd       	sbrc	r28, 7
 440:	fa 95       	dec	r31
 442:	60 81       	ld	r22, Z
 444:	c7 01       	movw	r24, r14
 446:	0e 94 cc 01 	call	0x398	; 0x398 <UART_Transmit>
 44a:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=*string_name;
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 44c:	8c 2f       	mov	r24, r28
 44e:	0c 2e       	mov	r0, r28
 450:	00 0c       	add	r0, r0
 452:	99 0b       	sbc	r25, r25
 454:	8c 15       	cp	r24, r12
 456:	9d 05       	cpc	r25, r13
 458:	7c f3       	brlt	.-34     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		{
			UART_Transmit(UART_addr, string_name[index]);
		}
	}
}
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	1f 91       	pop	r17
 460:	0f 91       	pop	r16
 462:	ff 90       	pop	r15
 464:	ef 90       	pop	r14
 466:	df 90       	pop	r13
 468:	cf 90       	pop	r12
 46a:	08 95       	ret

0000046c <__udivmodsi4>:
 46c:	a1 e2       	ldi	r26, 0x21	; 33
 46e:	1a 2e       	mov	r1, r26
 470:	aa 1b       	sub	r26, r26
 472:	bb 1b       	sub	r27, r27
 474:	fd 01       	movw	r30, r26
 476:	0d c0       	rjmp	.+26     	; 0x492 <__udivmodsi4_ep>

00000478 <__udivmodsi4_loop>:
 478:	aa 1f       	adc	r26, r26
 47a:	bb 1f       	adc	r27, r27
 47c:	ee 1f       	adc	r30, r30
 47e:	ff 1f       	adc	r31, r31
 480:	a2 17       	cp	r26, r18
 482:	b3 07       	cpc	r27, r19
 484:	e4 07       	cpc	r30, r20
 486:	f5 07       	cpc	r31, r21
 488:	20 f0       	brcs	.+8      	; 0x492 <__udivmodsi4_ep>
 48a:	a2 1b       	sub	r26, r18
 48c:	b3 0b       	sbc	r27, r19
 48e:	e4 0b       	sbc	r30, r20
 490:	f5 0b       	sbc	r31, r21

00000492 <__udivmodsi4_ep>:
 492:	66 1f       	adc	r22, r22
 494:	77 1f       	adc	r23, r23
 496:	88 1f       	adc	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	1a 94       	dec	r1
 49c:	69 f7       	brne	.-38     	; 0x478 <__udivmodsi4_loop>
 49e:	60 95       	com	r22
 4a0:	70 95       	com	r23
 4a2:	80 95       	com	r24
 4a4:	90 95       	com	r25
 4a6:	9b 01       	movw	r18, r22
 4a8:	ac 01       	movw	r20, r24
 4aa:	bd 01       	movw	r22, r26
 4ac:	cf 01       	movw	r24, r30
 4ae:	08 95       	ret

000004b0 <sprintf>:
 4b0:	ae e0       	ldi	r26, 0x0E	; 14
 4b2:	b0 e0       	ldi	r27, 0x00	; 0
 4b4:	ee e5       	ldi	r30, 0x5E	; 94
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__prologue_saves__+0x1c>
 4bc:	0d 89       	ldd	r16, Y+21	; 0x15
 4be:	1e 89       	ldd	r17, Y+22	; 0x16
 4c0:	86 e0       	ldi	r24, 0x06	; 6
 4c2:	8c 83       	std	Y+4, r24	; 0x04
 4c4:	1a 83       	std	Y+2, r17	; 0x02
 4c6:	09 83       	std	Y+1, r16	; 0x01
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	9f e7       	ldi	r25, 0x7F	; 127
 4cc:	9e 83       	std	Y+6, r25	; 0x06
 4ce:	8d 83       	std	Y+5, r24	; 0x05
 4d0:	ae 01       	movw	r20, r28
 4d2:	47 5e       	subi	r20, 0xE7	; 231
 4d4:	5f 4f       	sbci	r21, 0xFF	; 255
 4d6:	6f 89       	ldd	r22, Y+23	; 0x17
 4d8:	78 8d       	ldd	r23, Y+24	; 0x18
 4da:	ce 01       	movw	r24, r28
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <vfprintf>
 4e2:	ef 81       	ldd	r30, Y+7	; 0x07
 4e4:	f8 85       	ldd	r31, Y+8	; 0x08
 4e6:	e0 0f       	add	r30, r16
 4e8:	f1 1f       	adc	r31, r17
 4ea:	10 82       	st	Z, r1
 4ec:	2e 96       	adiw	r28, 0x0e	; 14
 4ee:	e4 e0       	ldi	r30, 0x04	; 4
 4f0:	0c 94 35 05 	jmp	0xa6a	; 0xa6a <__epilogue_restores__+0x1c>

000004f4 <vfprintf>:
 4f4:	ab e0       	ldi	r26, 0x0B	; 11
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	e0 e8       	ldi	r30, 0x80	; 128
 4fa:	f2 e0       	ldi	r31, 0x02	; 2
 4fc:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__prologue_saves__>
 500:	6c 01       	movw	r12, r24
 502:	7b 01       	movw	r14, r22
 504:	8a 01       	movw	r16, r20
 506:	fc 01       	movw	r30, r24
 508:	17 82       	std	Z+7, r1	; 0x07
 50a:	16 82       	std	Z+6, r1	; 0x06
 50c:	83 81       	ldd	r24, Z+3	; 0x03
 50e:	81 ff       	sbrs	r24, 1
 510:	cc c1       	rjmp	.+920    	; 0x8aa <vfprintf+0x3b6>
 512:	ce 01       	movw	r24, r28
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	3c 01       	movw	r6, r24
 518:	f6 01       	movw	r30, r12
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	f7 01       	movw	r30, r14
 51e:	93 fd       	sbrc	r25, 3
 520:	85 91       	lpm	r24, Z+
 522:	93 ff       	sbrs	r25, 3
 524:	81 91       	ld	r24, Z+
 526:	7f 01       	movw	r14, r30
 528:	88 23       	and	r24, r24
 52a:	09 f4       	brne	.+2      	; 0x52e <vfprintf+0x3a>
 52c:	ba c1       	rjmp	.+884    	; 0x8a2 <vfprintf+0x3ae>
 52e:	85 32       	cpi	r24, 0x25	; 37
 530:	39 f4       	brne	.+14     	; 0x540 <vfprintf+0x4c>
 532:	93 fd       	sbrc	r25, 3
 534:	85 91       	lpm	r24, Z+
 536:	93 ff       	sbrs	r25, 3
 538:	81 91       	ld	r24, Z+
 53a:	7f 01       	movw	r14, r30
 53c:	85 32       	cpi	r24, 0x25	; 37
 53e:	29 f4       	brne	.+10     	; 0x54a <vfprintf+0x56>
 540:	b6 01       	movw	r22, r12
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 548:	e7 cf       	rjmp	.-50     	; 0x518 <vfprintf+0x24>
 54a:	91 2c       	mov	r9, r1
 54c:	21 2c       	mov	r2, r1
 54e:	31 2c       	mov	r3, r1
 550:	ff e1       	ldi	r31, 0x1F	; 31
 552:	f3 15       	cp	r31, r3
 554:	d8 f0       	brcs	.+54     	; 0x58c <vfprintf+0x98>
 556:	8b 32       	cpi	r24, 0x2B	; 43
 558:	79 f0       	breq	.+30     	; 0x578 <vfprintf+0x84>
 55a:	38 f4       	brcc	.+14     	; 0x56a <vfprintf+0x76>
 55c:	80 32       	cpi	r24, 0x20	; 32
 55e:	79 f0       	breq	.+30     	; 0x57e <vfprintf+0x8a>
 560:	83 32       	cpi	r24, 0x23	; 35
 562:	a1 f4       	brne	.+40     	; 0x58c <vfprintf+0x98>
 564:	23 2d       	mov	r18, r3
 566:	20 61       	ori	r18, 0x10	; 16
 568:	1d c0       	rjmp	.+58     	; 0x5a4 <vfprintf+0xb0>
 56a:	8d 32       	cpi	r24, 0x2D	; 45
 56c:	61 f0       	breq	.+24     	; 0x586 <vfprintf+0x92>
 56e:	80 33       	cpi	r24, 0x30	; 48
 570:	69 f4       	brne	.+26     	; 0x58c <vfprintf+0x98>
 572:	23 2d       	mov	r18, r3
 574:	21 60       	ori	r18, 0x01	; 1
 576:	16 c0       	rjmp	.+44     	; 0x5a4 <vfprintf+0xb0>
 578:	83 2d       	mov	r24, r3
 57a:	82 60       	ori	r24, 0x02	; 2
 57c:	38 2e       	mov	r3, r24
 57e:	e3 2d       	mov	r30, r3
 580:	e4 60       	ori	r30, 0x04	; 4
 582:	3e 2e       	mov	r3, r30
 584:	2a c0       	rjmp	.+84     	; 0x5da <vfprintf+0xe6>
 586:	f3 2d       	mov	r31, r3
 588:	f8 60       	ori	r31, 0x08	; 8
 58a:	1d c0       	rjmp	.+58     	; 0x5c6 <vfprintf+0xd2>
 58c:	37 fc       	sbrc	r3, 7
 58e:	2d c0       	rjmp	.+90     	; 0x5ea <vfprintf+0xf6>
 590:	20 ed       	ldi	r18, 0xD0	; 208
 592:	28 0f       	add	r18, r24
 594:	2a 30       	cpi	r18, 0x0A	; 10
 596:	40 f0       	brcs	.+16     	; 0x5a8 <vfprintf+0xb4>
 598:	8e 32       	cpi	r24, 0x2E	; 46
 59a:	b9 f4       	brne	.+46     	; 0x5ca <vfprintf+0xd6>
 59c:	36 fc       	sbrc	r3, 6
 59e:	81 c1       	rjmp	.+770    	; 0x8a2 <vfprintf+0x3ae>
 5a0:	23 2d       	mov	r18, r3
 5a2:	20 64       	ori	r18, 0x40	; 64
 5a4:	32 2e       	mov	r3, r18
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <vfprintf+0xe6>
 5a8:	36 fe       	sbrs	r3, 6
 5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <vfprintf+0xc4>
 5ac:	8a e0       	ldi	r24, 0x0A	; 10
 5ae:	98 9e       	mul	r9, r24
 5b0:	20 0d       	add	r18, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	92 2e       	mov	r9, r18
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <vfprintf+0xe6>
 5b8:	ea e0       	ldi	r30, 0x0A	; 10
 5ba:	2e 9e       	mul	r2, r30
 5bc:	20 0d       	add	r18, r0
 5be:	11 24       	eor	r1, r1
 5c0:	22 2e       	mov	r2, r18
 5c2:	f3 2d       	mov	r31, r3
 5c4:	f0 62       	ori	r31, 0x20	; 32
 5c6:	3f 2e       	mov	r3, r31
 5c8:	08 c0       	rjmp	.+16     	; 0x5da <vfprintf+0xe6>
 5ca:	8c 36       	cpi	r24, 0x6C	; 108
 5cc:	21 f4       	brne	.+8      	; 0x5d6 <vfprintf+0xe2>
 5ce:	83 2d       	mov	r24, r3
 5d0:	80 68       	ori	r24, 0x80	; 128
 5d2:	38 2e       	mov	r3, r24
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0xe6>
 5d6:	88 36       	cpi	r24, 0x68	; 104
 5d8:	41 f4       	brne	.+16     	; 0x5ea <vfprintf+0xf6>
 5da:	f7 01       	movw	r30, r14
 5dc:	93 fd       	sbrc	r25, 3
 5de:	85 91       	lpm	r24, Z+
 5e0:	93 ff       	sbrs	r25, 3
 5e2:	81 91       	ld	r24, Z+
 5e4:	7f 01       	movw	r14, r30
 5e6:	81 11       	cpse	r24, r1
 5e8:	b3 cf       	rjmp	.-154    	; 0x550 <vfprintf+0x5c>
 5ea:	98 2f       	mov	r25, r24
 5ec:	9f 7d       	andi	r25, 0xDF	; 223
 5ee:	95 54       	subi	r25, 0x45	; 69
 5f0:	93 30       	cpi	r25, 0x03	; 3
 5f2:	28 f4       	brcc	.+10     	; 0x5fe <vfprintf+0x10a>
 5f4:	0c 5f       	subi	r16, 0xFC	; 252
 5f6:	1f 4f       	sbci	r17, 0xFF	; 255
 5f8:	9f e3       	ldi	r25, 0x3F	; 63
 5fa:	99 83       	std	Y+1, r25	; 0x01
 5fc:	0d c0       	rjmp	.+26     	; 0x618 <vfprintf+0x124>
 5fe:	83 36       	cpi	r24, 0x63	; 99
 600:	31 f0       	breq	.+12     	; 0x60e <vfprintf+0x11a>
 602:	83 37       	cpi	r24, 0x73	; 115
 604:	71 f0       	breq	.+28     	; 0x622 <vfprintf+0x12e>
 606:	83 35       	cpi	r24, 0x53	; 83
 608:	09 f0       	breq	.+2      	; 0x60c <vfprintf+0x118>
 60a:	59 c0       	rjmp	.+178    	; 0x6be <vfprintf+0x1ca>
 60c:	21 c0       	rjmp	.+66     	; 0x650 <vfprintf+0x15c>
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	89 83       	std	Y+1, r24	; 0x01
 614:	0e 5f       	subi	r16, 0xFE	; 254
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	88 24       	eor	r8, r8
 61a:	83 94       	inc	r8
 61c:	91 2c       	mov	r9, r1
 61e:	53 01       	movw	r10, r6
 620:	13 c0       	rjmp	.+38     	; 0x648 <vfprintf+0x154>
 622:	28 01       	movw	r4, r16
 624:	f2 e0       	ldi	r31, 0x02	; 2
 626:	4f 0e       	add	r4, r31
 628:	51 1c       	adc	r5, r1
 62a:	f8 01       	movw	r30, r16
 62c:	a0 80       	ld	r10, Z
 62e:	b1 80       	ldd	r11, Z+1	; 0x01
 630:	36 fe       	sbrs	r3, 6
 632:	03 c0       	rjmp	.+6      	; 0x63a <vfprintf+0x146>
 634:	69 2d       	mov	r22, r9
 636:	70 e0       	ldi	r23, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <vfprintf+0x14a>
 63a:	6f ef       	ldi	r22, 0xFF	; 255
 63c:	7f ef       	ldi	r23, 0xFF	; 255
 63e:	c5 01       	movw	r24, r10
 640:	0e 94 66 04 	call	0x8cc	; 0x8cc <strnlen>
 644:	4c 01       	movw	r8, r24
 646:	82 01       	movw	r16, r4
 648:	f3 2d       	mov	r31, r3
 64a:	ff 77       	andi	r31, 0x7F	; 127
 64c:	3f 2e       	mov	r3, r31
 64e:	16 c0       	rjmp	.+44     	; 0x67c <vfprintf+0x188>
 650:	28 01       	movw	r4, r16
 652:	22 e0       	ldi	r18, 0x02	; 2
 654:	42 0e       	add	r4, r18
 656:	51 1c       	adc	r5, r1
 658:	f8 01       	movw	r30, r16
 65a:	a0 80       	ld	r10, Z
 65c:	b1 80       	ldd	r11, Z+1	; 0x01
 65e:	36 fe       	sbrs	r3, 6
 660:	03 c0       	rjmp	.+6      	; 0x668 <vfprintf+0x174>
 662:	69 2d       	mov	r22, r9
 664:	70 e0       	ldi	r23, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <vfprintf+0x178>
 668:	6f ef       	ldi	r22, 0xFF	; 255
 66a:	7f ef       	ldi	r23, 0xFF	; 255
 66c:	c5 01       	movw	r24, r10
 66e:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <strnlen_P>
 672:	4c 01       	movw	r8, r24
 674:	f3 2d       	mov	r31, r3
 676:	f0 68       	ori	r31, 0x80	; 128
 678:	3f 2e       	mov	r3, r31
 67a:	82 01       	movw	r16, r4
 67c:	33 fc       	sbrc	r3, 3
 67e:	1b c0       	rjmp	.+54     	; 0x6b6 <vfprintf+0x1c2>
 680:	82 2d       	mov	r24, r2
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	88 16       	cp	r8, r24
 686:	99 06       	cpc	r9, r25
 688:	b0 f4       	brcc	.+44     	; 0x6b6 <vfprintf+0x1c2>
 68a:	b6 01       	movw	r22, r12
 68c:	80 e2       	ldi	r24, 0x20	; 32
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 694:	2a 94       	dec	r2
 696:	f4 cf       	rjmp	.-24     	; 0x680 <vfprintf+0x18c>
 698:	f5 01       	movw	r30, r10
 69a:	37 fc       	sbrc	r3, 7
 69c:	85 91       	lpm	r24, Z+
 69e:	37 fe       	sbrs	r3, 7
 6a0:	81 91       	ld	r24, Z+
 6a2:	5f 01       	movw	r10, r30
 6a4:	b6 01       	movw	r22, r12
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 6ac:	21 10       	cpse	r2, r1
 6ae:	2a 94       	dec	r2
 6b0:	21 e0       	ldi	r18, 0x01	; 1
 6b2:	82 1a       	sub	r8, r18
 6b4:	91 08       	sbc	r9, r1
 6b6:	81 14       	cp	r8, r1
 6b8:	91 04       	cpc	r9, r1
 6ba:	71 f7       	brne	.-36     	; 0x698 <vfprintf+0x1a4>
 6bc:	e8 c0       	rjmp	.+464    	; 0x88e <vfprintf+0x39a>
 6be:	84 36       	cpi	r24, 0x64	; 100
 6c0:	11 f0       	breq	.+4      	; 0x6c6 <vfprintf+0x1d2>
 6c2:	89 36       	cpi	r24, 0x69	; 105
 6c4:	41 f5       	brne	.+80     	; 0x716 <vfprintf+0x222>
 6c6:	f8 01       	movw	r30, r16
 6c8:	37 fe       	sbrs	r3, 7
 6ca:	07 c0       	rjmp	.+14     	; 0x6da <vfprintf+0x1e6>
 6cc:	60 81       	ld	r22, Z
 6ce:	71 81       	ldd	r23, Z+1	; 0x01
 6d0:	82 81       	ldd	r24, Z+2	; 0x02
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	0c 5f       	subi	r16, 0xFC	; 252
 6d6:	1f 4f       	sbci	r17, 0xFF	; 255
 6d8:	08 c0       	rjmp	.+16     	; 0x6ea <vfprintf+0x1f6>
 6da:	60 81       	ld	r22, Z
 6dc:	71 81       	ldd	r23, Z+1	; 0x01
 6de:	07 2e       	mov	r0, r23
 6e0:	00 0c       	add	r0, r0
 6e2:	88 0b       	sbc	r24, r24
 6e4:	99 0b       	sbc	r25, r25
 6e6:	0e 5f       	subi	r16, 0xFE	; 254
 6e8:	1f 4f       	sbci	r17, 0xFF	; 255
 6ea:	f3 2d       	mov	r31, r3
 6ec:	ff 76       	andi	r31, 0x6F	; 111
 6ee:	3f 2e       	mov	r3, r31
 6f0:	97 ff       	sbrs	r25, 7
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <vfprintf+0x212>
 6f4:	90 95       	com	r25
 6f6:	80 95       	com	r24
 6f8:	70 95       	com	r23
 6fa:	61 95       	neg	r22
 6fc:	7f 4f       	sbci	r23, 0xFF	; 255
 6fe:	8f 4f       	sbci	r24, 0xFF	; 255
 700:	9f 4f       	sbci	r25, 0xFF	; 255
 702:	f0 68       	ori	r31, 0x80	; 128
 704:	3f 2e       	mov	r3, r31
 706:	2a e0       	ldi	r18, 0x0A	; 10
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	a3 01       	movw	r20, r6
 70c:	0e 94 ad 04 	call	0x95a	; 0x95a <__ultoa_invert>
 710:	88 2e       	mov	r8, r24
 712:	86 18       	sub	r8, r6
 714:	45 c0       	rjmp	.+138    	; 0x7a0 <vfprintf+0x2ac>
 716:	85 37       	cpi	r24, 0x75	; 117
 718:	31 f4       	brne	.+12     	; 0x726 <vfprintf+0x232>
 71a:	23 2d       	mov	r18, r3
 71c:	2f 7e       	andi	r18, 0xEF	; 239
 71e:	b2 2e       	mov	r11, r18
 720:	2a e0       	ldi	r18, 0x0A	; 10
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	25 c0       	rjmp	.+74     	; 0x770 <vfprintf+0x27c>
 726:	93 2d       	mov	r25, r3
 728:	99 7f       	andi	r25, 0xF9	; 249
 72a:	b9 2e       	mov	r11, r25
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	c1 f0       	breq	.+48     	; 0x760 <vfprintf+0x26c>
 730:	18 f4       	brcc	.+6      	; 0x738 <vfprintf+0x244>
 732:	88 35       	cpi	r24, 0x58	; 88
 734:	79 f0       	breq	.+30     	; 0x754 <vfprintf+0x260>
 736:	b5 c0       	rjmp	.+362    	; 0x8a2 <vfprintf+0x3ae>
 738:	80 37       	cpi	r24, 0x70	; 112
 73a:	19 f0       	breq	.+6      	; 0x742 <vfprintf+0x24e>
 73c:	88 37       	cpi	r24, 0x78	; 120
 73e:	21 f0       	breq	.+8      	; 0x748 <vfprintf+0x254>
 740:	b0 c0       	rjmp	.+352    	; 0x8a2 <vfprintf+0x3ae>
 742:	e9 2f       	mov	r30, r25
 744:	e0 61       	ori	r30, 0x10	; 16
 746:	be 2e       	mov	r11, r30
 748:	b4 fe       	sbrs	r11, 4
 74a:	0d c0       	rjmp	.+26     	; 0x766 <vfprintf+0x272>
 74c:	fb 2d       	mov	r31, r11
 74e:	f4 60       	ori	r31, 0x04	; 4
 750:	bf 2e       	mov	r11, r31
 752:	09 c0       	rjmp	.+18     	; 0x766 <vfprintf+0x272>
 754:	34 fe       	sbrs	r3, 4
 756:	0a c0       	rjmp	.+20     	; 0x76c <vfprintf+0x278>
 758:	29 2f       	mov	r18, r25
 75a:	26 60       	ori	r18, 0x06	; 6
 75c:	b2 2e       	mov	r11, r18
 75e:	06 c0       	rjmp	.+12     	; 0x76c <vfprintf+0x278>
 760:	28 e0       	ldi	r18, 0x08	; 8
 762:	30 e0       	ldi	r19, 0x00	; 0
 764:	05 c0       	rjmp	.+10     	; 0x770 <vfprintf+0x27c>
 766:	20 e1       	ldi	r18, 0x10	; 16
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <vfprintf+0x27c>
 76c:	20 e1       	ldi	r18, 0x10	; 16
 76e:	32 e0       	ldi	r19, 0x02	; 2
 770:	f8 01       	movw	r30, r16
 772:	b7 fe       	sbrs	r11, 7
 774:	07 c0       	rjmp	.+14     	; 0x784 <vfprintf+0x290>
 776:	60 81       	ld	r22, Z
 778:	71 81       	ldd	r23, Z+1	; 0x01
 77a:	82 81       	ldd	r24, Z+2	; 0x02
 77c:	93 81       	ldd	r25, Z+3	; 0x03
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	06 c0       	rjmp	.+12     	; 0x790 <vfprintf+0x29c>
 784:	60 81       	ld	r22, Z
 786:	71 81       	ldd	r23, Z+1	; 0x01
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	0e 5f       	subi	r16, 0xFE	; 254
 78e:	1f 4f       	sbci	r17, 0xFF	; 255
 790:	a3 01       	movw	r20, r6
 792:	0e 94 ad 04 	call	0x95a	; 0x95a <__ultoa_invert>
 796:	88 2e       	mov	r8, r24
 798:	86 18       	sub	r8, r6
 79a:	fb 2d       	mov	r31, r11
 79c:	ff 77       	andi	r31, 0x7F	; 127
 79e:	3f 2e       	mov	r3, r31
 7a0:	36 fe       	sbrs	r3, 6
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <vfprintf+0x2ca>
 7a4:	23 2d       	mov	r18, r3
 7a6:	2e 7f       	andi	r18, 0xFE	; 254
 7a8:	a2 2e       	mov	r10, r18
 7aa:	89 14       	cp	r8, r9
 7ac:	58 f4       	brcc	.+22     	; 0x7c4 <vfprintf+0x2d0>
 7ae:	34 fe       	sbrs	r3, 4
 7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <vfprintf+0x2d4>
 7b2:	32 fc       	sbrc	r3, 2
 7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <vfprintf+0x2d4>
 7b6:	83 2d       	mov	r24, r3
 7b8:	8e 7e       	andi	r24, 0xEE	; 238
 7ba:	a8 2e       	mov	r10, r24
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <vfprintf+0x2d4>
 7be:	b8 2c       	mov	r11, r8
 7c0:	a3 2c       	mov	r10, r3
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <vfprintf+0x2d6>
 7c4:	b8 2c       	mov	r11, r8
 7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vfprintf+0x2d6>
 7c8:	b9 2c       	mov	r11, r9
 7ca:	a4 fe       	sbrs	r10, 4
 7cc:	0f c0       	rjmp	.+30     	; 0x7ec <vfprintf+0x2f8>
 7ce:	fe 01       	movw	r30, r28
 7d0:	e8 0d       	add	r30, r8
 7d2:	f1 1d       	adc	r31, r1
 7d4:	80 81       	ld	r24, Z
 7d6:	80 33       	cpi	r24, 0x30	; 48
 7d8:	21 f4       	brne	.+8      	; 0x7e2 <vfprintf+0x2ee>
 7da:	9a 2d       	mov	r25, r10
 7dc:	99 7e       	andi	r25, 0xE9	; 233
 7de:	a9 2e       	mov	r10, r25
 7e0:	09 c0       	rjmp	.+18     	; 0x7f4 <vfprintf+0x300>
 7e2:	a2 fe       	sbrs	r10, 2
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <vfprintf+0x2fe>
 7e6:	b3 94       	inc	r11
 7e8:	b3 94       	inc	r11
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <vfprintf+0x300>
 7ec:	8a 2d       	mov	r24, r10
 7ee:	86 78       	andi	r24, 0x86	; 134
 7f0:	09 f0       	breq	.+2      	; 0x7f4 <vfprintf+0x300>
 7f2:	b3 94       	inc	r11
 7f4:	a3 fc       	sbrc	r10, 3
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <vfprintf+0x326>
 7f8:	a0 fe       	sbrs	r10, 0
 7fa:	06 c0       	rjmp	.+12     	; 0x808 <vfprintf+0x314>
 7fc:	b2 14       	cp	r11, r2
 7fe:	88 f4       	brcc	.+34     	; 0x822 <vfprintf+0x32e>
 800:	28 0c       	add	r2, r8
 802:	92 2c       	mov	r9, r2
 804:	9b 18       	sub	r9, r11
 806:	0e c0       	rjmp	.+28     	; 0x824 <vfprintf+0x330>
 808:	b2 14       	cp	r11, r2
 80a:	60 f4       	brcc	.+24     	; 0x824 <vfprintf+0x330>
 80c:	b6 01       	movw	r22, r12
 80e:	80 e2       	ldi	r24, 0x20	; 32
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 816:	b3 94       	inc	r11
 818:	f7 cf       	rjmp	.-18     	; 0x808 <vfprintf+0x314>
 81a:	b2 14       	cp	r11, r2
 81c:	18 f4       	brcc	.+6      	; 0x824 <vfprintf+0x330>
 81e:	2b 18       	sub	r2, r11
 820:	02 c0       	rjmp	.+4      	; 0x826 <vfprintf+0x332>
 822:	98 2c       	mov	r9, r8
 824:	21 2c       	mov	r2, r1
 826:	a4 fe       	sbrs	r10, 4
 828:	10 c0       	rjmp	.+32     	; 0x84a <vfprintf+0x356>
 82a:	b6 01       	movw	r22, r12
 82c:	80 e3       	ldi	r24, 0x30	; 48
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 834:	a2 fe       	sbrs	r10, 2
 836:	17 c0       	rjmp	.+46     	; 0x866 <vfprintf+0x372>
 838:	a1 fc       	sbrc	r10, 1
 83a:	03 c0       	rjmp	.+6      	; 0x842 <vfprintf+0x34e>
 83c:	88 e7       	ldi	r24, 0x78	; 120
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <vfprintf+0x352>
 842:	88 e5       	ldi	r24, 0x58	; 88
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	b6 01       	movw	r22, r12
 848:	0c c0       	rjmp	.+24     	; 0x862 <vfprintf+0x36e>
 84a:	8a 2d       	mov	r24, r10
 84c:	86 78       	andi	r24, 0x86	; 134
 84e:	59 f0       	breq	.+22     	; 0x866 <vfprintf+0x372>
 850:	a1 fe       	sbrs	r10, 1
 852:	02 c0       	rjmp	.+4      	; 0x858 <vfprintf+0x364>
 854:	8b e2       	ldi	r24, 0x2B	; 43
 856:	01 c0       	rjmp	.+2      	; 0x85a <vfprintf+0x366>
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	a7 fc       	sbrc	r10, 7
 85c:	8d e2       	ldi	r24, 0x2D	; 45
 85e:	b6 01       	movw	r22, r12
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 866:	89 14       	cp	r8, r9
 868:	38 f4       	brcc	.+14     	; 0x878 <vfprintf+0x384>
 86a:	b6 01       	movw	r22, r12
 86c:	80 e3       	ldi	r24, 0x30	; 48
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 874:	9a 94       	dec	r9
 876:	f7 cf       	rjmp	.-18     	; 0x866 <vfprintf+0x372>
 878:	8a 94       	dec	r8
 87a:	f3 01       	movw	r30, r6
 87c:	e8 0d       	add	r30, r8
 87e:	f1 1d       	adc	r31, r1
 880:	80 81       	ld	r24, Z
 882:	b6 01       	movw	r22, r12
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 88a:	81 10       	cpse	r8, r1
 88c:	f5 cf       	rjmp	.-22     	; 0x878 <vfprintf+0x384>
 88e:	22 20       	and	r2, r2
 890:	09 f4       	brne	.+2      	; 0x894 <vfprintf+0x3a0>
 892:	42 ce       	rjmp	.-892    	; 0x518 <vfprintf+0x24>
 894:	b6 01       	movw	r22, r12
 896:	80 e2       	ldi	r24, 0x20	; 32
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <fputc>
 89e:	2a 94       	dec	r2
 8a0:	f6 cf       	rjmp	.-20     	; 0x88e <vfprintf+0x39a>
 8a2:	f6 01       	movw	r30, r12
 8a4:	86 81       	ldd	r24, Z+6	; 0x06
 8a6:	97 81       	ldd	r25, Z+7	; 0x07
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <vfprintf+0x3ba>
 8aa:	8f ef       	ldi	r24, 0xFF	; 255
 8ac:	9f ef       	ldi	r25, 0xFF	; 255
 8ae:	2b 96       	adiw	r28, 0x0b	; 11
 8b0:	e2 e1       	ldi	r30, 0x12	; 18
 8b2:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__epilogue_restores__>

000008b6 <strnlen_P>:
 8b6:	fc 01       	movw	r30, r24
 8b8:	05 90       	lpm	r0, Z+
 8ba:	61 50       	subi	r22, 0x01	; 1
 8bc:	70 40       	sbci	r23, 0x00	; 0
 8be:	01 10       	cpse	r0, r1
 8c0:	d8 f7       	brcc	.-10     	; 0x8b8 <strnlen_P+0x2>
 8c2:	80 95       	com	r24
 8c4:	90 95       	com	r25
 8c6:	8e 0f       	add	r24, r30
 8c8:	9f 1f       	adc	r25, r31
 8ca:	08 95       	ret

000008cc <strnlen>:
 8cc:	fc 01       	movw	r30, r24
 8ce:	61 50       	subi	r22, 0x01	; 1
 8d0:	70 40       	sbci	r23, 0x00	; 0
 8d2:	01 90       	ld	r0, Z+
 8d4:	01 10       	cpse	r0, r1
 8d6:	d8 f7       	brcc	.-10     	; 0x8ce <strnlen+0x2>
 8d8:	80 95       	com	r24
 8da:	90 95       	com	r25
 8dc:	8e 0f       	add	r24, r30
 8de:	9f 1f       	adc	r25, r31
 8e0:	08 95       	ret

000008e2 <fputc>:
 8e2:	0f 93       	push	r16
 8e4:	1f 93       	push	r17
 8e6:	cf 93       	push	r28
 8e8:	df 93       	push	r29
 8ea:	fb 01       	movw	r30, r22
 8ec:	23 81       	ldd	r18, Z+3	; 0x03
 8ee:	21 fd       	sbrc	r18, 1
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <fputc+0x16>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	2c c0       	rjmp	.+88     	; 0x950 <__stack+0x51>
 8f8:	22 ff       	sbrs	r18, 2
 8fa:	16 c0       	rjmp	.+44     	; 0x928 <__stack+0x29>
 8fc:	46 81       	ldd	r20, Z+6	; 0x06
 8fe:	57 81       	ldd	r21, Z+7	; 0x07
 900:	24 81       	ldd	r18, Z+4	; 0x04
 902:	35 81       	ldd	r19, Z+5	; 0x05
 904:	42 17       	cp	r20, r18
 906:	53 07       	cpc	r21, r19
 908:	44 f4       	brge	.+16     	; 0x91a <__stack+0x1b>
 90a:	a0 81       	ld	r26, Z
 90c:	b1 81       	ldd	r27, Z+1	; 0x01
 90e:	9d 01       	movw	r18, r26
 910:	2f 5f       	subi	r18, 0xFF	; 255
 912:	3f 4f       	sbci	r19, 0xFF	; 255
 914:	31 83       	std	Z+1, r19	; 0x01
 916:	20 83       	st	Z, r18
 918:	8c 93       	st	X, r24
 91a:	26 81       	ldd	r18, Z+6	; 0x06
 91c:	37 81       	ldd	r19, Z+7	; 0x07
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	37 83       	std	Z+7, r19	; 0x07
 924:	26 83       	std	Z+6, r18	; 0x06
 926:	14 c0       	rjmp	.+40     	; 0x950 <__stack+0x51>
 928:	8b 01       	movw	r16, r22
 92a:	ec 01       	movw	r28, r24
 92c:	fb 01       	movw	r30, r22
 92e:	00 84       	ldd	r0, Z+8	; 0x08
 930:	f1 85       	ldd	r31, Z+9	; 0x09
 932:	e0 2d       	mov	r30, r0
 934:	09 95       	icall
 936:	89 2b       	or	r24, r25
 938:	e1 f6       	brne	.-72     	; 0x8f2 <fputc+0x10>
 93a:	d8 01       	movw	r26, r16
 93c:	16 96       	adiw	r26, 0x06	; 6
 93e:	8d 91       	ld	r24, X+
 940:	9c 91       	ld	r25, X
 942:	17 97       	sbiw	r26, 0x07	; 7
 944:	01 96       	adiw	r24, 0x01	; 1
 946:	17 96       	adiw	r26, 0x07	; 7
 948:	9c 93       	st	X, r25
 94a:	8e 93       	st	-X, r24
 94c:	16 97       	sbiw	r26, 0x06	; 6
 94e:	ce 01       	movw	r24, r28
 950:	df 91       	pop	r29
 952:	cf 91       	pop	r28
 954:	1f 91       	pop	r17
 956:	0f 91       	pop	r16
 958:	08 95       	ret

0000095a <__ultoa_invert>:
 95a:	fa 01       	movw	r30, r20
 95c:	aa 27       	eor	r26, r26
 95e:	28 30       	cpi	r18, 0x08	; 8
 960:	51 f1       	breq	.+84     	; 0x9b6 <__ultoa_invert+0x5c>
 962:	20 31       	cpi	r18, 0x10	; 16
 964:	81 f1       	breq	.+96     	; 0x9c6 <__ultoa_invert+0x6c>
 966:	e8 94       	clt
 968:	6f 93       	push	r22
 96a:	6e 7f       	andi	r22, 0xFE	; 254
 96c:	6e 5f       	subi	r22, 0xFE	; 254
 96e:	7f 4f       	sbci	r23, 0xFF	; 255
 970:	8f 4f       	sbci	r24, 0xFF	; 255
 972:	9f 4f       	sbci	r25, 0xFF	; 255
 974:	af 4f       	sbci	r26, 0xFF	; 255
 976:	b1 e0       	ldi	r27, 0x01	; 1
 978:	3e d0       	rcall	.+124    	; 0x9f6 <__ultoa_invert+0x9c>
 97a:	b4 e0       	ldi	r27, 0x04	; 4
 97c:	3c d0       	rcall	.+120    	; 0x9f6 <__ultoa_invert+0x9c>
 97e:	67 0f       	add	r22, r23
 980:	78 1f       	adc	r23, r24
 982:	89 1f       	adc	r24, r25
 984:	9a 1f       	adc	r25, r26
 986:	a1 1d       	adc	r26, r1
 988:	68 0f       	add	r22, r24
 98a:	79 1f       	adc	r23, r25
 98c:	8a 1f       	adc	r24, r26
 98e:	91 1d       	adc	r25, r1
 990:	a1 1d       	adc	r26, r1
 992:	6a 0f       	add	r22, r26
 994:	71 1d       	adc	r23, r1
 996:	81 1d       	adc	r24, r1
 998:	91 1d       	adc	r25, r1
 99a:	a1 1d       	adc	r26, r1
 99c:	20 d0       	rcall	.+64     	; 0x9de <__ultoa_invert+0x84>
 99e:	09 f4       	brne	.+2      	; 0x9a2 <__ultoa_invert+0x48>
 9a0:	68 94       	set
 9a2:	3f 91       	pop	r19
 9a4:	2a e0       	ldi	r18, 0x0A	; 10
 9a6:	26 9f       	mul	r18, r22
 9a8:	11 24       	eor	r1, r1
 9aa:	30 19       	sub	r19, r0
 9ac:	30 5d       	subi	r19, 0xD0	; 208
 9ae:	31 93       	st	Z+, r19
 9b0:	de f6       	brtc	.-74     	; 0x968 <__ultoa_invert+0xe>
 9b2:	cf 01       	movw	r24, r30
 9b4:	08 95       	ret
 9b6:	46 2f       	mov	r20, r22
 9b8:	47 70       	andi	r20, 0x07	; 7
 9ba:	40 5d       	subi	r20, 0xD0	; 208
 9bc:	41 93       	st	Z+, r20
 9be:	b3 e0       	ldi	r27, 0x03	; 3
 9c0:	0f d0       	rcall	.+30     	; 0x9e0 <__ultoa_invert+0x86>
 9c2:	c9 f7       	brne	.-14     	; 0x9b6 <__ultoa_invert+0x5c>
 9c4:	f6 cf       	rjmp	.-20     	; 0x9b2 <__ultoa_invert+0x58>
 9c6:	46 2f       	mov	r20, r22
 9c8:	4f 70       	andi	r20, 0x0F	; 15
 9ca:	40 5d       	subi	r20, 0xD0	; 208
 9cc:	4a 33       	cpi	r20, 0x3A	; 58
 9ce:	18 f0       	brcs	.+6      	; 0x9d6 <__ultoa_invert+0x7c>
 9d0:	49 5d       	subi	r20, 0xD9	; 217
 9d2:	31 fd       	sbrc	r19, 1
 9d4:	40 52       	subi	r20, 0x20	; 32
 9d6:	41 93       	st	Z+, r20
 9d8:	02 d0       	rcall	.+4      	; 0x9de <__ultoa_invert+0x84>
 9da:	a9 f7       	brne	.-22     	; 0x9c6 <__ultoa_invert+0x6c>
 9dc:	ea cf       	rjmp	.-44     	; 0x9b2 <__ultoa_invert+0x58>
 9de:	b4 e0       	ldi	r27, 0x04	; 4
 9e0:	a6 95       	lsr	r26
 9e2:	97 95       	ror	r25
 9e4:	87 95       	ror	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	ba 95       	dec	r27
 9ec:	c9 f7       	brne	.-14     	; 0x9e0 <__ultoa_invert+0x86>
 9ee:	00 97       	sbiw	r24, 0x00	; 0
 9f0:	61 05       	cpc	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	08 95       	ret
 9f6:	9b 01       	movw	r18, r22
 9f8:	ac 01       	movw	r20, r24
 9fa:	0a 2e       	mov	r0, r26
 9fc:	06 94       	lsr	r0
 9fe:	57 95       	ror	r21
 a00:	47 95       	ror	r20
 a02:	37 95       	ror	r19
 a04:	27 95       	ror	r18
 a06:	ba 95       	dec	r27
 a08:	c9 f7       	brne	.-14     	; 0x9fc <__ultoa_invert+0xa2>
 a0a:	62 0f       	add	r22, r18
 a0c:	73 1f       	adc	r23, r19
 a0e:	84 1f       	adc	r24, r20
 a10:	95 1f       	adc	r25, r21
 a12:	a0 1d       	adc	r26, r0
 a14:	08 95       	ret

00000a16 <__prologue_saves__>:
 a16:	2f 92       	push	r2
 a18:	3f 92       	push	r3
 a1a:	4f 92       	push	r4
 a1c:	5f 92       	push	r5
 a1e:	6f 92       	push	r6
 a20:	7f 92       	push	r7
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
 a3a:	cd b7       	in	r28, 0x3d	; 61
 a3c:	de b7       	in	r29, 0x3e	; 62
 a3e:	ca 1b       	sub	r28, r26
 a40:	db 0b       	sbc	r29, r27
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	09 94       	ijmp

00000a4e <__epilogue_restores__>:
 a4e:	2a 88       	ldd	r2, Y+18	; 0x12
 a50:	39 88       	ldd	r3, Y+17	; 0x11
 a52:	48 88       	ldd	r4, Y+16	; 0x10
 a54:	5f 84       	ldd	r5, Y+15	; 0x0f
 a56:	6e 84       	ldd	r6, Y+14	; 0x0e
 a58:	7d 84       	ldd	r7, Y+13	; 0x0d
 a5a:	8c 84       	ldd	r8, Y+12	; 0x0c
 a5c:	9b 84       	ldd	r9, Y+11	; 0x0b
 a5e:	aa 84       	ldd	r10, Y+10	; 0x0a
 a60:	b9 84       	ldd	r11, Y+9	; 0x09
 a62:	c8 84       	ldd	r12, Y+8	; 0x08
 a64:	df 80       	ldd	r13, Y+7	; 0x07
 a66:	ee 80       	ldd	r14, Y+6	; 0x06
 a68:	fd 80       	ldd	r15, Y+5	; 0x05
 a6a:	0c 81       	ldd	r16, Y+4	; 0x04
 a6c:	1b 81       	ldd	r17, Y+3	; 0x03
 a6e:	aa 81       	ldd	r26, Y+2	; 0x02
 a70:	b9 81       	ldd	r27, Y+1	; 0x01
 a72:	ce 0f       	add	r28, r30
 a74:	d1 1d       	adc	r29, r1
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	ed 01       	movw	r28, r26
 a82:	08 95       	ret

00000a84 <_exit>:
 a84:	f8 94       	cli

00000a86 <__stop_program>:
 a86:	ff cf       	rjmp	.-2      	; 0xa86 <__stop_program>
